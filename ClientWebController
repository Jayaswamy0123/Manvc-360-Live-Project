[AllowAnonymous]
[HttpGet("[action]")]
public async Task<IActionResult> DownloadPdfGenerationForTickets()
{
    try
    {
        var pdfDataList = await _context.Ticket
            .Where(ticket => !string.IsNullOrEmpty(ticket.filePath)) 
            .Select(ticket => ticket.filePath)
            .ToListAsync();

        var zipFileName = $"Ticket_PDFs_{DateTime.Now:yyyyMMddHHmmss}.zip";

        using (var memoryStream = new MemoryStream())
        {
            using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
            {
                foreach (var pdfData in pdfDataList)
                {
                    var pdfBytes = Convert.FromBase64String(pdfData);
                    var entry = archive.CreateEntry($"{Guid.NewGuid()}.pdf", CompressionLevel.Fastest);
                    using (var entryStream = entry.Open())
                    {
                        await entryStream.WriteAsync(pdfBytes, 0, pdfBytes.Length);
                    }
                }
            }

            Response.Headers.Add("Content-Disposition", $"attachment; filename={zipFileName}");
            Response.Headers.Add("Content-Type", "application/zip");
            memoryStream.Seek(0, SeekOrigin.Begin);
            return File(memoryStream.ToArray(), "application/zip", zipFileName);
        }
    }
    catch (Exception ex)
    {
        return StatusCode(500, $"Internal server error: {ex.Message}");
    }
}
